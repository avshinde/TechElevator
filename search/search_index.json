{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\ude80 Core Topics to Learn & Prepare \u2705 1. System Design Load Balancing \u2013 Distributes traffic across multiple servers for reliability and availability. Caching \u2013 Stores frequently accessed data in memory for faster access. Database Sharding \u2013 Splits databases to handle large-scale data growth. Replication \u2013 Copies data across replicas for availability and fault tolerance. CAP Theorem \u2013 Trade-off between consistency, availability, and partition tolerance. Consistent Hashing \u2013 Distributes load evenly in dynamic server environments. Message Queues \u2013 Decouples services using asynchronous event-driven architecture. Rate Limiting \u2013 Controls request frequency to prevent system overload. API Gateway \u2013 Centralized entry point for routing API requests. Microservices \u2013 Breaks systems into independent, loosely coupled services. Service Discovery \u2013 Locates services dynamically in distributed systems. CDN (Content Delivery Network) \u2013 Delivers content from edge servers for speed. Database Indexing \u2013 Speeds up queries by indexing important fields. Data Partitioning \u2013 Divides data across nodes for scalability and performance. Eventual Consistency \u2013 Guarantees consistency over time in distributed databases. WebSockets \u2013 Enables bi-directional communication for live updates. Scalability \u2013 Increases capacity by upgrading or adding machines. Fault Tolerance \u2013 Ensures system availability during hardware/software failures. Monitoring \u2013 Tracks metrics and logs to understand system health. Authentication & Authorization \u2013 Controls user access and verifies identity securely. \u2705 2. Architecture Patterns & Concepts Clean Architecture / Hexagonal Architecture CQRS and Event Sourcing Domain-Driven Design (DDD) Message Brokers (Kafka, RabbitMQ) Service Mesh (Istio, Linkerd) \u2705 3. Cloud & DevOps Cloud Providers (AWS / Azure / GCP) CI/CD pipelines (Jenkins, GitHub Actions, etc.) Docker and Kubernetes Infrastructure as Code (Terraform, Pulumi) Monitoring & Logging (ELK, Prometheus, Grafana) \u2705 4. Leadership & Communication Technical decision-making Code reviews and mentorship Project estimation and planning Agile methodologies Conflict resolution and team collaboration \u2705 5. Language & Framework Mastery Advanced Java (Streams, Concurrency, Memory Mgmt) Spring/Spring Boot internals ORM & JPA tuning (Hibernate, etc.) Unit and Integration Testing (JUnit, Mockito) \u2705 6. Databases SQL tuning and indexing strategies NoSQL databases (MongoDB, Cassandra) Data modeling and relationships CAP theorem and consistency models \u2705 7. Security & Performance OAuth2, JWT, Role-based access control API rate limiting and throttling OWASP Top 10 Performance tuning (JVM, DB, Network) \u2705 8. Soft Skills Communication with stakeholders Technical documentation Interviewing and hiring Ownership mindset \ud83e\udded How to Use This Website Click on the topics above to go to detailed notes and study material. Use the checklist to track your progress. Add your own insights and notes as you go! \u201cA good architect is a good communicator, a continuous learner, and a strategic thinker.\u201d","title":"Home"},{"location":"#core-topics-to-learn-prepare","text":"","title":"\ud83d\ude80 Core Topics to Learn &amp; Prepare"},{"location":"#1-system-design","text":"Load Balancing \u2013 Distributes traffic across multiple servers for reliability and availability. Caching \u2013 Stores frequently accessed data in memory for faster access. Database Sharding \u2013 Splits databases to handle large-scale data growth. Replication \u2013 Copies data across replicas for availability and fault tolerance. CAP Theorem \u2013 Trade-off between consistency, availability, and partition tolerance. Consistent Hashing \u2013 Distributes load evenly in dynamic server environments. Message Queues \u2013 Decouples services using asynchronous event-driven architecture. Rate Limiting \u2013 Controls request frequency to prevent system overload. API Gateway \u2013 Centralized entry point for routing API requests. Microservices \u2013 Breaks systems into independent, loosely coupled services. Service Discovery \u2013 Locates services dynamically in distributed systems. CDN (Content Delivery Network) \u2013 Delivers content from edge servers for speed. Database Indexing \u2013 Speeds up queries by indexing important fields. Data Partitioning \u2013 Divides data across nodes for scalability and performance. Eventual Consistency \u2013 Guarantees consistency over time in distributed databases. WebSockets \u2013 Enables bi-directional communication for live updates. Scalability \u2013 Increases capacity by upgrading or adding machines. Fault Tolerance \u2013 Ensures system availability during hardware/software failures. Monitoring \u2013 Tracks metrics and logs to understand system health. Authentication & Authorization \u2013 Controls user access and verifies identity securely.","title":"\u2705 1. System Design"},{"location":"#2-architecture-patterns-concepts","text":"Clean Architecture / Hexagonal Architecture CQRS and Event Sourcing Domain-Driven Design (DDD) Message Brokers (Kafka, RabbitMQ) Service Mesh (Istio, Linkerd)","title":"\u2705 2. Architecture Patterns &amp; Concepts"},{"location":"#3-cloud-devops","text":"Cloud Providers (AWS / Azure / GCP) CI/CD pipelines (Jenkins, GitHub Actions, etc.) Docker and Kubernetes Infrastructure as Code (Terraform, Pulumi) Monitoring & Logging (ELK, Prometheus, Grafana)","title":"\u2705 3. Cloud &amp; DevOps"},{"location":"#4-leadership-communication","text":"Technical decision-making Code reviews and mentorship Project estimation and planning Agile methodologies Conflict resolution and team collaboration","title":"\u2705 4. Leadership &amp; Communication"},{"location":"#5-language-framework-mastery","text":"Advanced Java (Streams, Concurrency, Memory Mgmt) Spring/Spring Boot internals ORM & JPA tuning (Hibernate, etc.) Unit and Integration Testing (JUnit, Mockito)","title":"\u2705 5. Language &amp; Framework Mastery"},{"location":"#6-databases","text":"SQL tuning and indexing strategies NoSQL databases (MongoDB, Cassandra) Data modeling and relationships CAP theorem and consistency models","title":"\u2705 6. Databases"},{"location":"#7-security-performance","text":"OAuth2, JWT, Role-based access control API rate limiting and throttling OWASP Top 10 Performance tuning (JVM, DB, Network)","title":"\u2705 7. Security &amp; Performance"},{"location":"#8-soft-skills","text":"Communication with stakeholders Technical documentation Interviewing and hiring Ownership mindset","title":"\u2705 8. Soft Skills"},{"location":"#how-to-use-this-website","text":"Click on the topics above to go to detailed notes and study material. Use the checklist to track your progress. Add your own insights and notes as you go! \u201cA good architect is a good communicator, a continuous learner, and a strategic thinker.\u201d","title":"\ud83e\udded How to Use This Website"},{"location":"GitCommands/","text":"Essential Git Cheatsheet! \ud83d\udd27 Basic Commands git init \u2013 Initialize a new Git repository. git clone < repo_url> \u2013 Clone a remote repository. git status \u2013 Check the status of your working directory. git add < file> \u2013 Stage changes for commit. git commit -m \"message\" \u2013 Commit staged changes with a message. git push \u2013 Push your local commits to the remote repository. git pull \u2013 Fetch and merge changes from the remote repo. git diff \u2013 Show changes in the working directory (uncommitted changes). git diff --staged \u2013 Show changes between the staging area and last commit. \ud83d\udee0\ufe0f Branching & Merging git branch \u2013 List branches. git branch < branch_name> \u2013 Create a new branch. git checkout < branch_name> \u2013 Switch to another branch. git checkout -b < branch_name> \u2013 Create and switch to a new branch. git merge < branch_name> \u2013 Merge a branch into the current one. git branch -d < branch_name> \u2013 Delete a branch after merging. git branch -D < branch_name> \u2013 Forcefully delete a branch, even if it hasn\u2019t merged. \ud83d\udd04 Synchronization git fetch \u2013 Download changes from remote without merging. git rebase < branch> \u2013 Reapply commits on top of another branch to maintain linear history. git pull --rebase \u2013 Fetch and reapply your changes on top of the latest remote changes. git remote add < name> < url> \u2013 Add a new remote repository. \ud83c\udfaf Advanced Git git stash \u2013 Temporarily save changes without committing. git stash pop \u2013 Reapply stashed changes. git cherry-pick < commit> \u2013 Apply a specific commit to your current branch. git log --oneline \u2013 View simplified commit history. git reflog \u2013 Show the history of your reference changes (e.g., checkout, resets). git log --graph --decorate --all \u2013 Show a visual commit history. \ud83d\udea8 Undoing Changes git reset < file> \u2013 Unstage a file. git reset --soft < commit> \u2013 Reset to a commit but keep changes in the working directory. git reset --hard < commit> \u2013 Completely reset to a previous commit, discarding changes. git revert < commit> \u2013 Create a new commit that undoes a specific commit. \u2699\ufe0f Collaborating with Others git fork \u2013 Fork a repository on GitHub (via UI) to start contributing. git pull origin < branch> \u2013 Pull changes from the original remote branch. git push origin < branch> \u2013 Push your branch to the original repository for collaboration.","title":"Git"},{"location":"GitCommands/#essential-git-cheatsheet","text":"","title":"Essential Git Cheatsheet!"},{"location":"GitCommands/#basic-commands","text":"git init \u2013 Initialize a new Git repository. git clone < repo_url> \u2013 Clone a remote repository. git status \u2013 Check the status of your working directory. git add < file> \u2013 Stage changes for commit. git commit -m \"message\" \u2013 Commit staged changes with a message. git push \u2013 Push your local commits to the remote repository. git pull \u2013 Fetch and merge changes from the remote repo. git diff \u2013 Show changes in the working directory (uncommitted changes). git diff --staged \u2013 Show changes between the staging area and last commit.","title":"\ud83d\udd27 Basic Commands"},{"location":"GitCommands/#branching-merging","text":"git branch \u2013 List branches. git branch < branch_name> \u2013 Create a new branch. git checkout < branch_name> \u2013 Switch to another branch. git checkout -b < branch_name> \u2013 Create and switch to a new branch. git merge < branch_name> \u2013 Merge a branch into the current one. git branch -d < branch_name> \u2013 Delete a branch after merging. git branch -D < branch_name> \u2013 Forcefully delete a branch, even if it hasn\u2019t merged.","title":"\ud83d\udee0\ufe0f Branching &amp; Merging"},{"location":"GitCommands/#synchronization","text":"git fetch \u2013 Download changes from remote without merging. git rebase < branch> \u2013 Reapply commits on top of another branch to maintain linear history. git pull --rebase \u2013 Fetch and reapply your changes on top of the latest remote changes. git remote add < name> < url> \u2013 Add a new remote repository.","title":"\ud83d\udd04 Synchronization"},{"location":"GitCommands/#advanced-git","text":"git stash \u2013 Temporarily save changes without committing. git stash pop \u2013 Reapply stashed changes. git cherry-pick < commit> \u2013 Apply a specific commit to your current branch. git log --oneline \u2013 View simplified commit history. git reflog \u2013 Show the history of your reference changes (e.g., checkout, resets). git log --graph --decorate --all \u2013 Show a visual commit history.","title":"\ud83c\udfaf Advanced Git"},{"location":"GitCommands/#undoing-changes","text":"git reset < file> \u2013 Unstage a file. git reset --soft < commit> \u2013 Reset to a commit but keep changes in the working directory. git reset --hard < commit> \u2013 Completely reset to a previous commit, discarding changes. git revert < commit> \u2013 Create a new commit that undoes a specific commit.","title":"\ud83d\udea8 Undoing Changes"},{"location":"GitCommands/#collaborating-with-others","text":"git fork \u2013 Fork a repository on GitHub (via UI) to start contributing. git pull origin < branch> \u2013 Pull changes from the original remote branch. git push origin < branch> \u2013 Push your branch to the original repository for collaboration.","title":"\u2699\ufe0f Collaborating with Others"},{"location":"MatchRecordFlow/","text":"Match Process Flow View Flow Details Start \u27a4 Check Asynchronous Processing \u27a4 No Synchronous Processing Update Workflow State \u27a4 Yes \u27a4 Initialize Batch Variables batchCounter , batchNumber , recordsPerAsyncCall \u27a4 Loop through SourceRecordKeyList Parse SourceRecordKeyID Negative SourceRecordKeyID Handling Log and Skip Invalid Key Exception Thrown for Negative Key \u27a4 Get ProductKey and Catalog \u27a4 Set MASTERCATALOGID in pInput \u27a4 Check for Null Catalog Exception Thrown for Null Catalog \u27a4 Log Repository Information \u27a4 Convert Match Attribute Names to CIM Attributes ( convertAttributeNameToAttribute ) Check for Empty or Null Attribute Names Obtain Attribute Names from OmniHelper if catalogID > 0 and names are empty Return Attributes List if Obtained Check Catalog and Attribute Validity Catalog and Attribute Lookup Check for Weighted Attribute Handle Catalog Qualifier Create CIMAttribute from Attribute Add CIMAttribute to Match Attributes List \u27a4 No Matching Attributes Set No Matching Records Update Workflow State \u27a4 Check for Omni-Enabled Catalog Add Master Instances to SourceRecordKeyList \u27a4 Get Catalog Products ( cpList ) for Source Records \u27a4 Empty cpList Handling Set No Matching Records Update Workflow State \u27a4 Cross-Repository Match Set CROSS_REPOSITORY_MATCH Flag Get Target Matching Attributes \u27a4 Get Individual and Penalty Match Scores \u27a4 Ignore Non-Matching Records (if specified) \u27a4 Check for Index Entity Existence Exception Thrown for Non-Existent Index Entity \u27a4 Asynchronous Processing Create Batch Process Details \u27a4 Get Post-Processor Class Name \u27a4 Loop for Asynchronous Processing Batch Records for Asynchronous Processing Initialize Async Variables Create a List for Records to Be Matched Loop Through Source Records Add Record to List Increment Batch Counter Check if Batch Counter Reached Limit Yes Log and Process Batch Reset Batch Counter and Create a New List No Process Remaining Records in the Last Batch \u27a4 Process Remaining Records Asynchronously (if any) \u27a4 Not Asynchronous Log Synchronous Processing Start Create MatchActivityData Object Set Input Data: pUser , pInput , eventID , cpList , matchCIMAttributes , minMatchScore , dqProcessType , targetMatchingAttributes , individualScores , penaltyScores Set Additional Data: Ignore Non-Matching Records (if specified) Set Index Entity Information ( indexEntityName , indexEntityAttributesList ) Set Custom Data ( cpList , recordsTobeSkipped , postProcessorClassName ) Check if Omni is Enabled for the Catalog Remove Inactive Records (if applicable) Update Data with Inactive Records Removal Get Search Entity List Obtain Search Entity List Using Input Data Check if Search Entity List is Empty Yes Log and Skip Processing Set No Matching Records Update Workflow State No Set Custom Data: useCustomFlag , customNetricsQueryBuilderImpl , failOrEmptyPredicate , executeSequenceList , executeSequenceListFileName Set Source Search Entity List Match Records Using MatchResultBusinessDelegate Process Records Synchronously Log Processing Summary Log Synchronous Processing End \u27a4 Asynchronous Suspension Suspend Activity (if sourceMatchCount > recordsPerAsyncCall ) \u27a4 Update Workflow State End","title":"Match Process Flow"},{"location":"MatchRecordFlow/#match-process-flow","text":"View Flow Details","title":"Match Process Flow"},{"location":"MatchRecordFlow/#start","text":"","title":"Start"},{"location":"MatchRecordFlow/#check-asynchronous-processing","text":"","title":"\u27a4 Check Asynchronous Processing"},{"location":"MatchRecordFlow/#no","text":"Synchronous Processing Update Workflow State","title":"\u27a4 No"},{"location":"MatchRecordFlow/#yes","text":"","title":"\u27a4 Yes"},{"location":"MatchRecordFlow/#initialize-batch-variables","text":"batchCounter , batchNumber , recordsPerAsyncCall","title":"\u27a4 Initialize Batch Variables"},{"location":"MatchRecordFlow/#loop-through-sourcerecordkeylist","text":"Parse SourceRecordKeyID Negative SourceRecordKeyID Handling Log and Skip Invalid Key Exception Thrown for Negative Key","title":"\u27a4 Loop through SourceRecordKeyList"},{"location":"MatchRecordFlow/#get-productkey-and-catalog","text":"","title":"\u27a4 Get ProductKey and Catalog"},{"location":"MatchRecordFlow/#set-mastercatalogid-in-pinput","text":"","title":"\u27a4 Set MASTERCATALOGID in pInput"},{"location":"MatchRecordFlow/#check-for-null-catalog","text":"Exception Thrown for Null Catalog","title":"\u27a4 Check for Null Catalog"},{"location":"MatchRecordFlow/#log-repository-information","text":"","title":"\u27a4 Log Repository Information"},{"location":"MatchRecordFlow/#convert-match-attribute-names-to-cim-attributes-convertattributenametoattribute","text":"Check for Empty or Null Attribute Names Obtain Attribute Names from OmniHelper if catalogID > 0 and names are empty Return Attributes List if Obtained Check Catalog and Attribute Validity Catalog and Attribute Lookup Check for Weighted Attribute Handle Catalog Qualifier Create CIMAttribute from Attribute Add CIMAttribute to Match Attributes List","title":"\u27a4 Convert Match Attribute Names to CIM Attributes (convertAttributeNameToAttribute)"},{"location":"MatchRecordFlow/#no-matching-attributes","text":"Set No Matching Records Update Workflow State","title":"\u27a4 No Matching Attributes"},{"location":"MatchRecordFlow/#check-for-omni-enabled-catalog","text":"Add Master Instances to SourceRecordKeyList","title":"\u27a4 Check for Omni-Enabled Catalog"},{"location":"MatchRecordFlow/#get-catalog-products-cplist-for-source-records","text":"","title":"\u27a4 Get Catalog Products (cpList) for Source Records"},{"location":"MatchRecordFlow/#empty-cplist-handling","text":"Set No Matching Records Update Workflow State","title":"\u27a4 Empty cpList Handling"},{"location":"MatchRecordFlow/#cross-repository-match","text":"Set CROSS_REPOSITORY_MATCH Flag Get Target Matching Attributes","title":"\u27a4 Cross-Repository Match"},{"location":"MatchRecordFlow/#get-individual-and-penalty-match-scores","text":"","title":"\u27a4 Get Individual and Penalty Match Scores"},{"location":"MatchRecordFlow/#ignore-non-matching-records-if-specified","text":"","title":"\u27a4 Ignore Non-Matching Records (if specified)"},{"location":"MatchRecordFlow/#check-for-index-entity-existence","text":"Exception Thrown for Non-Existent Index Entity","title":"\u27a4 Check for Index Entity Existence"},{"location":"MatchRecordFlow/#asynchronous-processing","text":"Create Batch Process Details","title":"\u27a4 Asynchronous Processing"},{"location":"MatchRecordFlow/#get-post-processor-class-name","text":"","title":"\u27a4 Get Post-Processor Class Name"},{"location":"MatchRecordFlow/#loop-for-asynchronous-processing","text":"Batch Records for Asynchronous Processing Initialize Async Variables Create a List for Records to Be Matched Loop Through Source Records Add Record to List Increment Batch Counter Check if Batch Counter Reached Limit Yes Log and Process Batch Reset Batch Counter and Create a New List No Process Remaining Records in the Last Batch","title":"\u27a4 Loop for Asynchronous Processing"},{"location":"MatchRecordFlow/#process-remaining-records-asynchronously-if-any","text":"","title":"\u27a4 Process Remaining Records Asynchronously (if any)"},{"location":"MatchRecordFlow/#not-asynchronous","text":"Log Synchronous Processing Start Create MatchActivityData Object Set Input Data: pUser , pInput , eventID , cpList , matchCIMAttributes , minMatchScore , dqProcessType , targetMatchingAttributes , individualScores , penaltyScores Set Additional Data: Ignore Non-Matching Records (if specified) Set Index Entity Information ( indexEntityName , indexEntityAttributesList ) Set Custom Data ( cpList , recordsTobeSkipped , postProcessorClassName ) Check if Omni is Enabled for the Catalog Remove Inactive Records (if applicable) Update Data with Inactive Records Removal Get Search Entity List Obtain Search Entity List Using Input Data Check if Search Entity List is Empty Yes Log and Skip Processing Set No Matching Records Update Workflow State No Set Custom Data: useCustomFlag , customNetricsQueryBuilderImpl , failOrEmptyPredicate , executeSequenceList , executeSequenceListFileName Set Source Search Entity List Match Records Using MatchResultBusinessDelegate Process Records Synchronously Log Processing Summary Log Synchronous Processing End","title":"\u27a4 Not Asynchronous"},{"location":"MatchRecordFlow/#asynchronous-suspension","text":"Suspend Activity (if sourceMatchCount > recordsPerAsyncCall )","title":"\u27a4 Asynchronous Suspension"},{"location":"MatchRecordFlow/#update-workflow-state","text":"","title":"\u27a4 Update Workflow State"},{"location":"MatchRecordFlow/#end","text":"","title":"End"},{"location":"RestAPI/","text":"","title":"RestAPI"},{"location":"SQL/","text":"SQL Notes for Beginners \ud83d\udcd8 What is SQL? SQL (Structured Query Language) is used to communicate with databases. It's used to store, retrieve, manage, and manipulate data in relational databases like MySQL, PostgreSQL, SQL Server, and Oracle. \ud83e\uddf1 Basic SQL Concepts 1. Database A database is a container that holds tables. 2. Table A table is a collection of rows and columns. \ud83d\udcca Sample Table: Employees EmployeeID FirstName LastName Department Salary 1 John Doe HR 50000 2 Jane Smith IT 60000 3 Mike Johnson IT 55000 4 Lisa Wong Finance 70000 5 Tom Brown HR 52000 \ud83d\udd0d SELECT Queries Get all employees: SELECT * FROM Employees; Result: Returns all rows and columns from the table. Get only First and Last Names: SELECT FirstName, LastName FROM Employees; Filter employees from IT department: SELECT * FROM Employees WHERE Department = 'IT'; Employees with salary > 55000: SELECT * FROM Employees WHERE Salary > 55000; \ud83d\udccb Other Basic Queries Sorting Data: SELECT * FROM Employees ORDER BY Salary DESC; Count of employees: SELECT COUNT(*) FROM Employees; Group by Department: SELECT Department, COUNT(*) AS TotalEmployees FROM Employees GROUP BY Department; Average Salary by Department: SELECT Department, AVG(Salary) AS AvgSalary FROM Employees GROUP BY Department; \u270d\ufe0f Inserting Data INSERT INTO Employees (EmployeeID, FirstName, LastName, Department, Salary) VALUES (6, 'Emma', 'Stone', 'Marketing', 58000); \ud83d\udcdd Updating Data UPDATE Employees SET Salary = 62000 WHERE FirstName = 'Tom'; \u274c Deleting Data DELETE FROM Employees WHERE EmployeeID = 6; \u2705 Tips SQL is case-insensitive . Always backup your data before DELETE or UPDATE . Use WHERE to avoid updating or deleting the whole table. \ud83e\udde0 Practice More Try to create your own table and run these queries: CREATE TABLE Students ( StudentID INT, Name VARCHAR(50), Grade INT ); INSERT INTO Students VALUES (1, 'Alice', 90), (2, 'Bob', 85); Then: SELECT * FROM Students;","title":"SQL"},{"location":"SQL/#sql-notes-for-beginners","text":"","title":"SQL Notes for Beginners"},{"location":"SQL/#what-is-sql","text":"SQL (Structured Query Language) is used to communicate with databases. It's used to store, retrieve, manage, and manipulate data in relational databases like MySQL, PostgreSQL, SQL Server, and Oracle.","title":"\ud83d\udcd8 What is SQL?"},{"location":"SQL/#basic-sql-concepts","text":"","title":"\ud83e\uddf1 Basic SQL Concepts"},{"location":"SQL/#1-database","text":"A database is a container that holds tables.","title":"1. Database"},{"location":"SQL/#2-table","text":"A table is a collection of rows and columns.","title":"2. Table"},{"location":"SQL/#sample-table-employees","text":"EmployeeID FirstName LastName Department Salary 1 John Doe HR 50000 2 Jane Smith IT 60000 3 Mike Johnson IT 55000 4 Lisa Wong Finance 70000 5 Tom Brown HR 52000","title":"\ud83d\udcca Sample Table: Employees"},{"location":"SQL/#select-queries","text":"","title":"\ud83d\udd0d SELECT Queries"},{"location":"SQL/#get-all-employees","text":"SELECT * FROM Employees; Result: Returns all rows and columns from the table.","title":"Get all employees:"},{"location":"SQL/#get-only-first-and-last-names","text":"SELECT FirstName, LastName FROM Employees;","title":"Get only First and Last Names:"},{"location":"SQL/#filter-employees-from-it-department","text":"SELECT * FROM Employees WHERE Department = 'IT';","title":"Filter employees from IT department:"},{"location":"SQL/#employees-with-salary-55000","text":"SELECT * FROM Employees WHERE Salary > 55000;","title":"Employees with salary &gt; 55000:"},{"location":"SQL/#other-basic-queries","text":"","title":"\ud83d\udccb Other Basic Queries"},{"location":"SQL/#sorting-data","text":"SELECT * FROM Employees ORDER BY Salary DESC;","title":"Sorting Data:"},{"location":"SQL/#count-of-employees","text":"SELECT COUNT(*) FROM Employees;","title":"Count of employees:"},{"location":"SQL/#group-by-department","text":"SELECT Department, COUNT(*) AS TotalEmployees FROM Employees GROUP BY Department;","title":"Group by Department:"},{"location":"SQL/#average-salary-by-department","text":"SELECT Department, AVG(Salary) AS AvgSalary FROM Employees GROUP BY Department;","title":"Average Salary by Department:"},{"location":"SQL/#inserting-data","text":"INSERT INTO Employees (EmployeeID, FirstName, LastName, Department, Salary) VALUES (6, 'Emma', 'Stone', 'Marketing', 58000);","title":"\u270d\ufe0f Inserting Data"},{"location":"SQL/#updating-data","text":"UPDATE Employees SET Salary = 62000 WHERE FirstName = 'Tom';","title":"\ud83d\udcdd Updating Data"},{"location":"SQL/#deleting-data","text":"DELETE FROM Employees WHERE EmployeeID = 6;","title":"\u274c Deleting Data"},{"location":"SQL/#tips","text":"SQL is case-insensitive . Always backup your data before DELETE or UPDATE . Use WHERE to avoid updating or deleting the whole table.","title":"\u2705 Tips"},{"location":"SQL/#practice-more","text":"Try to create your own table and run these queries: CREATE TABLE Students ( StudentID INT, Name VARCHAR(50), Grade INT ); INSERT INTO Students VALUES (1, 'Alice', 90), (2, 'Bob', 85); Then: SELECT * FROM Students;","title":"\ud83e\udde0 Practice More"}]}