{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"MatchRecordFlow/","text":"Match Process Flow Flow Diagram Start \u27a4 Check Asynchronous Processing \u27a4 No Synchronous Processing Update Workflow State \u27a4 Yes \u27a4 Initialize Batch Variables batchCounter , batchNumber , recordsPerAsyncCall \u27a4 Loop through SourceRecordKeyList Parse SourceRecordKeyID Negative SourceRecordKeyID Handling Log and Skip Invalid Key Exception Thrown for Negative Key \u27a4 Get ProductKey and Catalog \u27a4 Set MASTERCATALOGID in pInput \u27a4 Check for Null Catalog Exception Thrown for Null Catalog \u27a4 Log Repository Information \u27a4 Convert Match Attribute Names to CIM Attributes ( convertAttributeNameToAttribute ) Check for Empty or Null Attribute Names Obtain Attribute Names from OmniHelper if catalogID > 0 and names are empty Return Attributes List if Obtained Check Catalog and Attribute Validity Catalog and Attribute Lookup Check for Weighted Attribute Handle Catalog Qualifier Create CIMAttribute from Attribute Add CIMAttribute to Match Attributes List \u27a4 No Matching Attributes Set No Matching Records Update Workflow State \u27a4 Check for Omni-Enabled Catalog Add Master Instances to SourceRecordKeyList \u27a4 Get Catalog Products ( cpList ) for Source Records \u27a4 Empty cpList Handling Set No Matching Records Update Workflow State \u27a4 Cross-Repository Match Set CROSS_REPOSITORY_MATCH Flag Get Target Matching Attributes \u27a4 Get Individual and Penalty Match Scores \u27a4 Ignore Non-Matching Records (if specified) \u27a4 Check for Index Entity Existence Exception Thrown for Non-Existent Index Entity \u27a4 Asynchronous Processing Create Batch Process Details \u27a4 Get Post-Processor Class Name \u27a4 Loop for Asynchronous Processing Batch Records for Asynchronous Processing Initialize Async Variables Create a List for Records to Be Matched Loop Through Source Records Add Record to List Increment Batch Counter Check if Batch Counter Reached Limit Yes Log and Process Batch Reset Batch Counter and Create a New List No Process Remaining Records in the Last Batch \u27a4 Process Remaining Records Asynchronously (if any) \u27a4 Not Asynchronous Log Synchronous Processing Start Create MatchActivityData Object Set Input Data: pUser , pInput , eventID , cpList , matchCIMAttributes , minMatchScore , dqProcessType , targetMatchingAttributes , individualScores , penaltyScores Set Additional Data: Ignore Non-Matching Records (if specified) Set Index Entity Information ( indexEntityName , indexEntityAttributesList ) Set Custom Data ( cpList , recordsTobeSkipped , postProcessorClassName ) Check if Omni is Enabled for the Catalog Remove Inactive Records (if applicable) Update Data with Inactive Records Removal Get Search Entity List Obtain Search Entity List Using Input Data Check if Search Entity List is Empty Yes Log and Skip Processing Set No Matching Records Update Workflow State No Set Custom Data: useCustomFlag , customNetricsQueryBuilderImpl , failOrEmptyPredicate , executeSequenceList , executeSequenceListFileName Set Source Search Entity List Match Records Using MatchResultBusinessDelegate Process Records Synchronously Log Processing Summary Log Synchronous Processing End \u27a4 Asynchronous Suspension Suspend Activity (if sourceMatchCount > recordsPerAsyncCall ) \u27a4 Update Workflow State End","title":"MatchFlow"},{"location":"MatchRecordFlow/#match-process-flow","text":"","title":"Match Process Flow"},{"location":"MatchRecordFlow/#start","text":"","title":"Start"},{"location":"MatchRecordFlow/#check-asynchronous-processing","text":"","title":"\u27a4 Check Asynchronous Processing"},{"location":"MatchRecordFlow/#no","text":"Synchronous Processing Update Workflow State","title":"\u27a4 No"},{"location":"MatchRecordFlow/#yes","text":"","title":"\u27a4 Yes"},{"location":"MatchRecordFlow/#initialize-batch-variables","text":"batchCounter , batchNumber , recordsPerAsyncCall","title":"\u27a4 Initialize Batch Variables"},{"location":"MatchRecordFlow/#loop-through-sourcerecordkeylist","text":"Parse SourceRecordKeyID Negative SourceRecordKeyID Handling Log and Skip Invalid Key Exception Thrown for Negative Key","title":"\u27a4 Loop through SourceRecordKeyList"},{"location":"MatchRecordFlow/#get-productkey-and-catalog","text":"","title":"\u27a4 Get ProductKey and Catalog"},{"location":"MatchRecordFlow/#set-mastercatalogid-in-pinput","text":"","title":"\u27a4 Set MASTERCATALOGID in pInput"},{"location":"MatchRecordFlow/#check-for-null-catalog","text":"Exception Thrown for Null Catalog","title":"\u27a4 Check for Null Catalog"},{"location":"MatchRecordFlow/#log-repository-information","text":"","title":"\u27a4 Log Repository Information"},{"location":"MatchRecordFlow/#convert-match-attribute-names-to-cim-attributes-convertattributenametoattribute","text":"Check for Empty or Null Attribute Names Obtain Attribute Names from OmniHelper if catalogID > 0 and names are empty Return Attributes List if Obtained Check Catalog and Attribute Validity Catalog and Attribute Lookup Check for Weighted Attribute Handle Catalog Qualifier Create CIMAttribute from Attribute Add CIMAttribute to Match Attributes List","title":"\u27a4 Convert Match Attribute Names to CIM Attributes (convertAttributeNameToAttribute)"},{"location":"MatchRecordFlow/#no-matching-attributes","text":"Set No Matching Records Update Workflow State","title":"\u27a4 No Matching Attributes"},{"location":"MatchRecordFlow/#check-for-omni-enabled-catalog","text":"Add Master Instances to SourceRecordKeyList","title":"\u27a4 Check for Omni-Enabled Catalog"},{"location":"MatchRecordFlow/#get-catalog-products-cplist-for-source-records","text":"","title":"\u27a4 Get Catalog Products (cpList) for Source Records"},{"location":"MatchRecordFlow/#empty-cplist-handling","text":"Set No Matching Records Update Workflow State","title":"\u27a4 Empty cpList Handling"},{"location":"MatchRecordFlow/#cross-repository-match","text":"Set CROSS_REPOSITORY_MATCH Flag Get Target Matching Attributes","title":"\u27a4 Cross-Repository Match"},{"location":"MatchRecordFlow/#get-individual-and-penalty-match-scores","text":"","title":"\u27a4 Get Individual and Penalty Match Scores"},{"location":"MatchRecordFlow/#ignore-non-matching-records-if-specified","text":"","title":"\u27a4 Ignore Non-Matching Records (if specified)"},{"location":"MatchRecordFlow/#check-for-index-entity-existence","text":"Exception Thrown for Non-Existent Index Entity","title":"\u27a4 Check for Index Entity Existence"},{"location":"MatchRecordFlow/#asynchronous-processing","text":"Create Batch Process Details","title":"\u27a4 Asynchronous Processing"},{"location":"MatchRecordFlow/#get-post-processor-class-name","text":"","title":"\u27a4 Get Post-Processor Class Name"},{"location":"MatchRecordFlow/#loop-for-asynchronous-processing","text":"Batch Records for Asynchronous Processing Initialize Async Variables Create a List for Records to Be Matched Loop Through Source Records Add Record to List Increment Batch Counter Check if Batch Counter Reached Limit Yes Log and Process Batch Reset Batch Counter and Create a New List No Process Remaining Records in the Last Batch","title":"\u27a4 Loop for Asynchronous Processing"},{"location":"MatchRecordFlow/#process-remaining-records-asynchronously-if-any","text":"","title":"\u27a4 Process Remaining Records Asynchronously (if any)"},{"location":"MatchRecordFlow/#not-asynchronous","text":"Log Synchronous Processing Start Create MatchActivityData Object Set Input Data: pUser , pInput , eventID , cpList , matchCIMAttributes , minMatchScore , dqProcessType , targetMatchingAttributes , individualScores , penaltyScores Set Additional Data: Ignore Non-Matching Records (if specified) Set Index Entity Information ( indexEntityName , indexEntityAttributesList ) Set Custom Data ( cpList , recordsTobeSkipped , postProcessorClassName ) Check if Omni is Enabled for the Catalog Remove Inactive Records (if applicable) Update Data with Inactive Records Removal Get Search Entity List Obtain Search Entity List Using Input Data Check if Search Entity List is Empty Yes Log and Skip Processing Set No Matching Records Update Workflow State No Set Custom Data: useCustomFlag , customNetricsQueryBuilderImpl , failOrEmptyPredicate , executeSequenceList , executeSequenceListFileName Set Source Search Entity List Match Records Using MatchResultBusinessDelegate Process Records Synchronously Log Processing Summary Log Synchronous Processing End","title":"\u27a4 Not Asynchronous"},{"location":"MatchRecordFlow/#asynchronous-suspension","text":"Suspend Activity (if sourceMatchCount > recordsPerAsyncCall )","title":"\u27a4 Asynchronous Suspension"},{"location":"MatchRecordFlow/#update-workflow-state","text":"","title":"\u27a4 Update Workflow State"},{"location":"MatchRecordFlow/#end","text":"","title":"End"},{"location":"RestAPI/","text":"","title":"RestAPI"}]}