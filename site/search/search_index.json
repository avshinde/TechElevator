{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\ude80 Core Topics to Learn & Prepare \u2705 1. System Design \ud83e\udde0 System Design \u2013 Advanced Notes Load Balancing \u2013 Distributes traffic across multiple servers for reliability and availability. Caching \u2013 Stores frequently accessed data in memory for faster access. Database Sharding \u2013 Splits databases to handle large-scale data growth. Replication \u2013 Copies data across replicas for availability and fault tolerance. CAP Theorem \u2013 Trade-off between consistency, availability, and partition tolerance. Consistent Hashing \u2013 Distributes load evenly in dynamic server environments. Message Queues \u2013 Decouples services using asynchronous event-driven architecture. Rate Limiting \u2013 Controls request frequency to prevent system overload. API Gateway \u2013 Centralized entry point for routing API requests. Microservices \u2013 Breaks systems into independent, loosely coupled services. Service Discovery \u2013 Locates services dynamically in distributed systems. CDN (Content Delivery Network) \u2013 Delivers content from edge servers for speed. Database Indexing \u2013 Speeds up queries by indexing important fields. Data Partitioning \u2013 Divides data across nodes for scalability and performance. Eventual Consistency \u2013 Guarantees consistency over time in distributed databases. WebSockets \u2013 Enables bi-directional communication for live updates. Scalability \u2013 Increases capacity by upgrading or adding machines. Fault Tolerance \u2013 Ensures system availability during hardware/software failures. Monitoring \u2013 Tracks metrics and logs to understand system health. Authentication & Authorization \u2013 Controls user access and verifies identity securely. \u2705 2. Architecture Patterns & Concepts Clean Architecture / Hexagonal Architecture CQRS and Event Sourcing Domain-Driven Design (DDD) Message Brokers (Kafka, RabbitMQ) Service Mesh (Istio, Linkerd) \u2705 3. Cloud & DevOps Cloud Providers (AWS / Azure / GCP) CI/CD pipelines (Jenkins, GitHub Actions, etc.) Docker and Kubernetes Infrastructure as Code (Terraform, Pulumi) Monitoring & Logging (ELK, Prometheus, Grafana) \u2705 4. Leadership & Communication Technical decision-making Code reviews and mentorship Project estimation and planning Agile methodologies Conflict resolution and team collaboration \u2705 5. Language & Framework Mastery Advanced Java (Streams, Concurrency, Memory Mgmt) Spring/Spring Boot internals ORM & JPA tuning (Hibernate, etc.) Unit and Integration Testing (JUnit, Mockito) \u2705 6. Databases SQL tuning and indexing strategies NoSQL databases (MongoDB, Cassandra) Data modeling and relationships CAP theorem and consistency models \u2705 7. Security & Performance OAuth2 \u2013 OAuth2 JWT, Role-based access control API rate limiting and throttling OWASP Top 10 Performance tuning (JVM, DB, Network) \u2705 8. Soft Skills Communication with stakeholders Technical documentation Interviewing and hiring Ownership mindset \u2705 9. Git Commands Essential Git Cheatsheet \u2013 Git Commands \u2705 10. AI-Augumented Developer AI-Augumented Developer and \ud83e\udded How to Use This Website Click on the topics above to go to detailed notes and study material. Use the checklist to track your progress. Add your own insights and notes as you go! \u201cA good architect is a good communicator, a continuous learner, and a strategic thinker.\u201d","title":"Home"},{"location":"#core-topics-to-learn-prepare","text":"","title":"\ud83d\ude80 Core Topics to Learn &amp; Prepare"},{"location":"#1-system-design","text":"\ud83e\udde0 System Design \u2013 Advanced Notes Load Balancing \u2013 Distributes traffic across multiple servers for reliability and availability. Caching \u2013 Stores frequently accessed data in memory for faster access. Database Sharding \u2013 Splits databases to handle large-scale data growth. Replication \u2013 Copies data across replicas for availability and fault tolerance. CAP Theorem \u2013 Trade-off between consistency, availability, and partition tolerance. Consistent Hashing \u2013 Distributes load evenly in dynamic server environments. Message Queues \u2013 Decouples services using asynchronous event-driven architecture. Rate Limiting \u2013 Controls request frequency to prevent system overload. API Gateway \u2013 Centralized entry point for routing API requests. Microservices \u2013 Breaks systems into independent, loosely coupled services. Service Discovery \u2013 Locates services dynamically in distributed systems. CDN (Content Delivery Network) \u2013 Delivers content from edge servers for speed. Database Indexing \u2013 Speeds up queries by indexing important fields. Data Partitioning \u2013 Divides data across nodes for scalability and performance. Eventual Consistency \u2013 Guarantees consistency over time in distributed databases. WebSockets \u2013 Enables bi-directional communication for live updates. Scalability \u2013 Increases capacity by upgrading or adding machines. Fault Tolerance \u2013 Ensures system availability during hardware/software failures. Monitoring \u2013 Tracks metrics and logs to understand system health. Authentication & Authorization \u2013 Controls user access and verifies identity securely.","title":"\u2705 1. System Design"},{"location":"#2-architecture-patterns-concepts","text":"Clean Architecture / Hexagonal Architecture CQRS and Event Sourcing Domain-Driven Design (DDD) Message Brokers (Kafka, RabbitMQ) Service Mesh (Istio, Linkerd)","title":"\u2705 2. Architecture Patterns &amp; Concepts"},{"location":"#3-cloud-devops","text":"Cloud Providers (AWS / Azure / GCP) CI/CD pipelines (Jenkins, GitHub Actions, etc.) Docker and Kubernetes Infrastructure as Code (Terraform, Pulumi) Monitoring & Logging (ELK, Prometheus, Grafana)","title":"\u2705 3. Cloud &amp; DevOps"},{"location":"#4-leadership-communication","text":"Technical decision-making Code reviews and mentorship Project estimation and planning Agile methodologies Conflict resolution and team collaboration","title":"\u2705 4. Leadership &amp; Communication"},{"location":"#5-language-framework-mastery","text":"Advanced Java (Streams, Concurrency, Memory Mgmt) Spring/Spring Boot internals ORM & JPA tuning (Hibernate, etc.) Unit and Integration Testing (JUnit, Mockito)","title":"\u2705 5. Language &amp; Framework Mastery"},{"location":"#6-databases","text":"SQL tuning and indexing strategies NoSQL databases (MongoDB, Cassandra) Data modeling and relationships CAP theorem and consistency models","title":"\u2705 6. Databases"},{"location":"#7-security-performance","text":"OAuth2 \u2013 OAuth2 JWT, Role-based access control API rate limiting and throttling OWASP Top 10 Performance tuning (JVM, DB, Network)","title":"\u2705 7. Security &amp; Performance"},{"location":"#8-soft-skills","text":"Communication with stakeholders Technical documentation Interviewing and hiring Ownership mindset","title":"\u2705 8. Soft Skills"},{"location":"#9-git-commands","text":"Essential Git Cheatsheet \u2013 Git Commands","title":"\u2705 9. Git Commands"},{"location":"#10-ai-augumented-developer","text":"AI-Augumented Developer and","title":"\u2705 10. AI-Augumented Developer"},{"location":"#how-to-use-this-website","text":"Click on the topics above to go to detailed notes and study material. Use the checklist to track your progress. Add your own insights and notes as you go! \u201cA good architect is a good communicator, a continuous learner, and a strategic thinker.\u201d","title":"\ud83e\udded How to Use This Website"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/","text":"12-Week AI-Augmented Developer & Solution Architect Roadmap Week 1\u20132: AI as Your Coding Copilot Goal: Use AI tools (ChatGPT, GitHub Copilot, Cursor IDE) to automate development workflows. Topics: Prompt engineering basics Copilot setup (VS Code, IntelliJ) AI for unit tests, documentation, boilerplate, refactoring Hands-on: Refactor one of your older projects using Copilot Use ChatGPT to write unit tests and API documentation Week 3\u20134: Building AI-Powered Apps (LLMs & RAG) Goal: Learn to integrate AI into full-stack apps Topics: OpenAI API (Chat, Completion, Embeddings) LangChain / LlamaIndex basics Vector DBs (FAISS, Pinecone) Retrieval-Augmented Generation (RAG) Hands-on: Build a chatbot using OpenAI + LangChain Use FAISS for document search + chatbot interface Week 5\u20136: Modern Cloud-Native Full Stack Goal: Develop scalable, production-ready projects Topics: Spring Boot / ASP.NET Core React + Tailwind or Blazor JWT, GraphQL, REST CI/CD with GitHub Actions or Azure DevOps Hands-on: Extend chatbot into a full-stack web app Add login, logging, config, and deploy pipeline Week 7\u20138: Docker, Kubernetes, and Cloud Deployments Goal: Deploy AI-powered microservices to the cloud Topics: Docker, docker-compose, Dockerfile Kubernetes (minikube, kubectl, Helm) Cloud basics (Azure / AWS / GCP) Monitoring (Prometheus, Grafana, App Insights) Hands-on: Containerize chatbot app Deploy to Kubernetes (local + cloud) Set up monitoring for microservices Week 9\u201310: System Design & Solution Architecture Goal: Think and act like a solution architect Topics: High-level components (LBs, cache, queues) CAP theorem, consistency models Event-driven architecture Hands-on: Solve 3 system design problems: YouTube Comments System AI Search Engine Real-Time Fraud Detection Write and share design docs Week 11\u201312: Portfolio, Branding & Role Prep Goal: Showcase your work and prepare for leadership roles Topics: Resume updates (AI + Cloud experience) LinkedIn branding strategy GitHub best practices (READMEs, demos) Hands-on: Publish 2 blog/LinkedIn articles Finalize and publish 1 AI project to GitHub Record demo video and include in README Bonus (Optional Certs): Microsoft Azure AI-900 / OpenAI Developer Training Docker / Kubernetes Associate System Design (Educative.io / Udemy) Tools to Use: AI: ChatGPT, GitHub Copilot, Cursor IDE Backend: FastAPI, Spring Boot, .NET Core Frontend: React, TailwindCSS, Blazor Infra: Docker, Kubernetes, GitHub Actions AI APIs: OpenAI, LangChain, LlamaIndex Vector DBs: FAISS, Pinecone Cloud: Azure, AWS, or GCP Monitoring: Grafana, App Insights Docs & Branding: Notion, Medium, LinkedIn, GitHub","title":"12-Week AI-Augmented Developer &amp; Solution Architect Roadmap"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#12-week-ai-augmented-developer-solution-architect-roadmap","text":"","title":"12-Week AI-Augmented Developer &amp; Solution Architect Roadmap"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#week-12-ai-as-your-coding-copilot","text":"Goal: Use AI tools (ChatGPT, GitHub Copilot, Cursor IDE) to automate development workflows.","title":"Week 1\u20132: AI as Your Coding Copilot"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#topics","text":"Prompt engineering basics Copilot setup (VS Code, IntelliJ) AI for unit tests, documentation, boilerplate, refactoring","title":"Topics:"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#hands-on","text":"Refactor one of your older projects using Copilot Use ChatGPT to write unit tests and API documentation","title":"Hands-on:"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#week-34-building-ai-powered-apps-llms-rag","text":"Goal: Learn to integrate AI into full-stack apps","title":"Week 3\u20134: Building AI-Powered Apps (LLMs &amp; RAG)"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#topics_1","text":"OpenAI API (Chat, Completion, Embeddings) LangChain / LlamaIndex basics Vector DBs (FAISS, Pinecone) Retrieval-Augmented Generation (RAG)","title":"Topics:"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#hands-on_1","text":"Build a chatbot using OpenAI + LangChain Use FAISS for document search + chatbot interface","title":"Hands-on:"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#week-56-modern-cloud-native-full-stack","text":"Goal: Develop scalable, production-ready projects","title":"Week 5\u20136: Modern Cloud-Native Full Stack"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#topics_2","text":"Spring Boot / ASP.NET Core React + Tailwind or Blazor JWT, GraphQL, REST CI/CD with GitHub Actions or Azure DevOps","title":"Topics:"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#hands-on_2","text":"Extend chatbot into a full-stack web app Add login, logging, config, and deploy pipeline","title":"Hands-on:"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#week-78-docker-kubernetes-and-cloud-deployments","text":"Goal: Deploy AI-powered microservices to the cloud","title":"Week 7\u20138: Docker, Kubernetes, and Cloud Deployments"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#topics_3","text":"Docker, docker-compose, Dockerfile Kubernetes (minikube, kubectl, Helm) Cloud basics (Azure / AWS / GCP) Monitoring (Prometheus, Grafana, App Insights)","title":"Topics:"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#hands-on_3","text":"Containerize chatbot app Deploy to Kubernetes (local + cloud) Set up monitoring for microservices","title":"Hands-on:"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#week-910-system-design-solution-architecture","text":"Goal: Think and act like a solution architect","title":"Week 9\u201310: System Design &amp; Solution Architecture"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#topics_4","text":"High-level components (LBs, cache, queues) CAP theorem, consistency models Event-driven architecture","title":"Topics:"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#hands-on_4","text":"Solve 3 system design problems: YouTube Comments System AI Search Engine Real-Time Fraud Detection Write and share design docs","title":"Hands-on:"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#week-1112-portfolio-branding-role-prep","text":"Goal: Showcase your work and prepare for leadership roles","title":"Week 11\u201312: Portfolio, Branding &amp; Role Prep"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#topics_5","text":"Resume updates (AI + Cloud experience) LinkedIn branding strategy GitHub best practices (READMEs, demos)","title":"Topics:"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#hands-on_5","text":"Publish 2 blog/LinkedIn articles Finalize and publish 1 AI project to GitHub Record demo video and include in README","title":"Hands-on:"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#bonus-optional-certs","text":"Microsoft Azure AI-900 / OpenAI Developer Training Docker / Kubernetes Associate System Design (Educative.io / Udemy)","title":"Bonus (Optional Certs):"},{"location":"AI-Augumented%20Developer%20and%20Solution%20Archtech%20RoadMap/#tools-to-use","text":"AI: ChatGPT, GitHub Copilot, Cursor IDE Backend: FastAPI, Spring Boot, .NET Core Frontend: React, TailwindCSS, Blazor Infra: Docker, Kubernetes, GitHub Actions AI APIs: OpenAI, LangChain, LlamaIndex Vector DBs: FAISS, Pinecone Cloud: Azure, AWS, or GCP Monitoring: Grafana, App Insights Docs & Branding: Notion, Medium, LinkedIn, GitHub","title":"Tools to Use:"},{"location":"GitCommands/","text":"Essential Git Cheatsheet! \ud83d\udd27 Basic Commands git init \u2013 Initialize a new Git repository. git clone < repo_url> \u2013 Clone a remote repository. git status \u2013 Check the status of your working directory. git add < file> \u2013 Stage changes for commit. git commit -m \"message\" \u2013 Commit staged changes with a message. git push \u2013 Push your local commits to the remote repository. git pull \u2013 Fetch and merge changes from the remote repo. git diff \u2013 Show changes in the working directory (uncommitted changes). git diff --staged \u2013 Show changes between the staging area and last commit. \ud83d\udee0\ufe0f Branching & Merging git branch \u2013 List branches. git branch < branch_name> \u2013 Create a new branch. git checkout < branch_name> \u2013 Switch to another branch. git checkout -b < branch_name> \u2013 Create and switch to a new branch. git merge < branch_name> \u2013 Merge a branch into the current one. git branch -d < branch_name> \u2013 Delete a branch after merging. git branch -D < branch_name> \u2013 Forcefully delete a branch, even if it hasn\u2019t merged. \ud83d\udd04 Synchronization git fetch \u2013 Download changes from remote without merging. git rebase < branch> \u2013 Reapply commits on top of another branch to maintain linear history. git pull --rebase \u2013 Fetch and reapply your changes on top of the latest remote changes. git remote add < name> < url> \u2013 Add a new remote repository. \ud83c\udfaf Advanced Git git stash \u2013 Temporarily save changes without committing. git stash pop \u2013 Reapply stashed changes. git cherry-pick < commit> \u2013 Apply a specific commit to your current branch. git log --oneline \u2013 View simplified commit history. git reflog \u2013 Show the history of your reference changes (e.g., checkout, resets). git log --graph --decorate --all \u2013 Show a visual commit history. \ud83d\udea8 Undoing Changes git reset < file> \u2013 Unstage a file. git reset --soft < commit> \u2013 Reset to a commit but keep changes in the working directory. git reset --hard < commit> \u2013 Completely reset to a previous commit, discarding changes. git revert < commit> \u2013 Create a new commit that undoes a specific commit. \u2699\ufe0f Collaborating with Others git fork \u2013 Fork a repository on GitHub (via UI) to start contributing. git pull origin < branch> \u2013 Pull changes from the original remote branch. git push origin < branch> \u2013 Push your branch to the original repository for collaboration.","title":"GitCommands"},{"location":"GitCommands/#essential-git-cheatsheet","text":"","title":"Essential Git Cheatsheet!"},{"location":"GitCommands/#basic-commands","text":"git init \u2013 Initialize a new Git repository. git clone < repo_url> \u2013 Clone a remote repository. git status \u2013 Check the status of your working directory. git add < file> \u2013 Stage changes for commit. git commit -m \"message\" \u2013 Commit staged changes with a message. git push \u2013 Push your local commits to the remote repository. git pull \u2013 Fetch and merge changes from the remote repo. git diff \u2013 Show changes in the working directory (uncommitted changes). git diff --staged \u2013 Show changes between the staging area and last commit.","title":"\ud83d\udd27 Basic Commands"},{"location":"GitCommands/#branching-merging","text":"git branch \u2013 List branches. git branch < branch_name> \u2013 Create a new branch. git checkout < branch_name> \u2013 Switch to another branch. git checkout -b < branch_name> \u2013 Create and switch to a new branch. git merge < branch_name> \u2013 Merge a branch into the current one. git branch -d < branch_name> \u2013 Delete a branch after merging. git branch -D < branch_name> \u2013 Forcefully delete a branch, even if it hasn\u2019t merged.","title":"\ud83d\udee0\ufe0f Branching &amp; Merging"},{"location":"GitCommands/#synchronization","text":"git fetch \u2013 Download changes from remote without merging. git rebase < branch> \u2013 Reapply commits on top of another branch to maintain linear history. git pull --rebase \u2013 Fetch and reapply your changes on top of the latest remote changes. git remote add < name> < url> \u2013 Add a new remote repository.","title":"\ud83d\udd04 Synchronization"},{"location":"GitCommands/#advanced-git","text":"git stash \u2013 Temporarily save changes without committing. git stash pop \u2013 Reapply stashed changes. git cherry-pick < commit> \u2013 Apply a specific commit to your current branch. git log --oneline \u2013 View simplified commit history. git reflog \u2013 Show the history of your reference changes (e.g., checkout, resets). git log --graph --decorate --all \u2013 Show a visual commit history.","title":"\ud83c\udfaf Advanced Git"},{"location":"GitCommands/#undoing-changes","text":"git reset < file> \u2013 Unstage a file. git reset --soft < commit> \u2013 Reset to a commit but keep changes in the working directory. git reset --hard < commit> \u2013 Completely reset to a previous commit, discarding changes. git revert < commit> \u2013 Create a new commit that undoes a specific commit.","title":"\ud83d\udea8 Undoing Changes"},{"location":"GitCommands/#collaborating-with-others","text":"git fork \u2013 Fork a repository on GitHub (via UI) to start contributing. git pull origin < branch> \u2013 Pull changes from the original remote branch. git push origin < branch> \u2013 Push your branch to the original repository for collaboration.","title":"\u2699\ufe0f Collaborating with Others"},{"location":"LoadBalancing/","text":"\ud83d\udd39 Load Balancing \u2013 Advanced Interview Preparation Notes \u2705 What is Load Balancing? Load Balancing is a method of distributing incoming network traffic across multiple backend servers to ensure: High availability Fault tolerance Scalability Optimized resource utilization \ud83d\udd27 Core Concepts Concept Description Server Pool Group of backend servers that share the load. Health Checks Periodic checks to ensure backend servers are up. Session Persistence (Sticky Sessions) Ties a user session to a specific server. Failover Automatically reroutes traffic if a server fails. DNS Load Balancing Uses DNS resolution to distribute load. Reverse Proxy Often used as a load balancer in front of application servers. \u2699\ufe0f Load Balancing Algorithms Algorithm Use Case Round Robin Equal distribution; good for similar server configs. Least Connections Routes to the server with the fewest active connections. IP Hash Based on client IP for sticky sessions. Weighted Round Robin / Least Connections Prioritizes more powerful servers. Random Randomly distributes to available servers. \ud83d\udcd0 Architecture & Real-World Use Cases \ud83d\udd38 Scenario 1: Web Application (3-Tier Architecture) Client \u2192 Nginx/HAProxy Load Balancer \u2192 App Servers \u2192 DB Add auto-scaling groups in cloud environments (AWS/GCP/Azure) \ud83d\udd38 Scenario 2: Microservices with API Gateway Client \u2192 API Gateway (with built-in load balancing) \u2192 Microservices Tools: Kong, Istio, AWS API Gateway \ud83d\ude80 Tools & Technologies Tool Purpose Nginx Software-based L4/L7 load balancer HAProxy High-performance L4/L7 load balancer AWS ELB (ALB/NLB/CLB) Cloud-managed load balancing Kubernetes Ingress Controller Load balancing for K8s services Istio Envoy Sidecar load balancing in service mesh \ud83e\uddea Hands-on Experience Checklist \u2705 Configure Nginx load balancer for multiple app servers \u2705 Use HAProxy to balance HTTP and TCP traffic \u2705 Implement AWS ALB with ECS/EKS \u2705 Deploy Kubernetes Ingress for service routing \u2705 Use Terraform or CloudFormation to provision load balancers \u2705 Configure health checks and sticky sessions \u2705 Benchmark with tools like Apache Benchmark , JMeter , or Locust \ud83d\udd10 Security Considerations Use HTTPS termination at Load Balancer Enable Web Application Firewall (WAF) Protect against DDoS (e.g., via AWS Shield) Implement rate limiting \ud83e\udde0 Interview Angle \u2013 Sample Questions Q1. How would you design a load-balanced system for millions of users? Discuss global load balancing (e.g., Route 53 + Cloudflare), CDN, regional ALBs, and auto-scaling. Q2. How do you handle sticky sessions in stateless microservices? Use JWT tokens, Redis-backed session storage, or consistent hashing. Q3. What\u2019s the difference between Layer 4 and Layer 7 load balancing? L4: TCP/UDP-level, faster, no app-layer logic L7: HTTP-level, allows content-based routing, SSL termination Q4. How do you handle server failure in a load-balanced setup? Health checks, remove failed node from pool, auto-replace in cloud infra Q5. How does a load balancer affect scalability and availability? Horizontal scalability, fault tolerance, enables zero-downtime deployments \ud83d\udcca Diagrams You Can Draw Load Balancer in front of App Servers High Availability Setup with Two Load Balancers (Active-Passive) Kubernetes Ingress + LoadBalancer Service","title":"\ud83d\udd39 Load Balancing \u2013 Advanced Interview Preparation Notes"},{"location":"LoadBalancing/#load-balancing-advanced-interview-preparation-notes","text":"","title":"\ud83d\udd39 Load Balancing \u2013 Advanced Interview Preparation Notes"},{"location":"LoadBalancing/#what-is-load-balancing","text":"Load Balancing is a method of distributing incoming network traffic across multiple backend servers to ensure: High availability Fault tolerance Scalability Optimized resource utilization","title":"\u2705 What is Load Balancing?"},{"location":"LoadBalancing/#core-concepts","text":"Concept Description Server Pool Group of backend servers that share the load. Health Checks Periodic checks to ensure backend servers are up. Session Persistence (Sticky Sessions) Ties a user session to a specific server. Failover Automatically reroutes traffic if a server fails. DNS Load Balancing Uses DNS resolution to distribute load. Reverse Proxy Often used as a load balancer in front of application servers.","title":"\ud83d\udd27 Core Concepts"},{"location":"LoadBalancing/#load-balancing-algorithms","text":"Algorithm Use Case Round Robin Equal distribution; good for similar server configs. Least Connections Routes to the server with the fewest active connections. IP Hash Based on client IP for sticky sessions. Weighted Round Robin / Least Connections Prioritizes more powerful servers. Random Randomly distributes to available servers.","title":"\u2699\ufe0f Load Balancing Algorithms"},{"location":"LoadBalancing/#architecture-real-world-use-cases","text":"","title":"\ud83d\udcd0 Architecture &amp; Real-World Use Cases"},{"location":"LoadBalancing/#scenario-1-web-application-3-tier-architecture","text":"Client \u2192 Nginx/HAProxy Load Balancer \u2192 App Servers \u2192 DB Add auto-scaling groups in cloud environments (AWS/GCP/Azure)","title":"\ud83d\udd38 Scenario 1: Web Application (3-Tier Architecture)"},{"location":"LoadBalancing/#scenario-2-microservices-with-api-gateway","text":"Client \u2192 API Gateway (with built-in load balancing) \u2192 Microservices Tools: Kong, Istio, AWS API Gateway","title":"\ud83d\udd38 Scenario 2: Microservices with API Gateway"},{"location":"LoadBalancing/#tools-technologies","text":"Tool Purpose Nginx Software-based L4/L7 load balancer HAProxy High-performance L4/L7 load balancer AWS ELB (ALB/NLB/CLB) Cloud-managed load balancing Kubernetes Ingress Controller Load balancing for K8s services Istio Envoy Sidecar load balancing in service mesh","title":"\ud83d\ude80 Tools &amp; Technologies"},{"location":"LoadBalancing/#hands-on-experience-checklist","text":"\u2705 Configure Nginx load balancer for multiple app servers \u2705 Use HAProxy to balance HTTP and TCP traffic \u2705 Implement AWS ALB with ECS/EKS \u2705 Deploy Kubernetes Ingress for service routing \u2705 Use Terraform or CloudFormation to provision load balancers \u2705 Configure health checks and sticky sessions \u2705 Benchmark with tools like Apache Benchmark , JMeter , or Locust","title":"\ud83e\uddea Hands-on Experience Checklist"},{"location":"LoadBalancing/#security-considerations","text":"Use HTTPS termination at Load Balancer Enable Web Application Firewall (WAF) Protect against DDoS (e.g., via AWS Shield) Implement rate limiting","title":"\ud83d\udd10 Security Considerations"},{"location":"LoadBalancing/#interview-angle-sample-questions","text":"","title":"\ud83e\udde0 Interview Angle \u2013 Sample Questions"},{"location":"LoadBalancing/#q1-how-would-you-design-a-load-balanced-system-for-millions-of-users","text":"Discuss global load balancing (e.g., Route 53 + Cloudflare), CDN, regional ALBs, and auto-scaling.","title":"Q1. How would you design a load-balanced system for millions of users?"},{"location":"LoadBalancing/#q2-how-do-you-handle-sticky-sessions-in-stateless-microservices","text":"Use JWT tokens, Redis-backed session storage, or consistent hashing.","title":"Q2. How do you handle sticky sessions in stateless microservices?"},{"location":"LoadBalancing/#q3-whats-the-difference-between-layer-4-and-layer-7-load-balancing","text":"L4: TCP/UDP-level, faster, no app-layer logic L7: HTTP-level, allows content-based routing, SSL termination","title":"Q3. What\u2019s the difference between Layer 4 and Layer 7 load balancing?"},{"location":"LoadBalancing/#q4-how-do-you-handle-server-failure-in-a-load-balanced-setup","text":"Health checks, remove failed node from pool, auto-replace in cloud infra","title":"Q4. How do you handle server failure in a load-balanced setup?"},{"location":"LoadBalancing/#q5-how-does-a-load-balancer-affect-scalability-and-availability","text":"Horizontal scalability, fault tolerance, enables zero-downtime deployments","title":"Q5. How does a load balancer affect scalability and availability?"},{"location":"LoadBalancing/#diagrams-you-can-draw","text":"Load Balancer in front of App Servers High Availability Setup with Two Load Balancers (Active-Passive) Kubernetes Ingress + LoadBalancer Service","title":"\ud83d\udcca Diagrams You Can Draw"},{"location":"OAuth2.0/","text":"OAuth 2.0 Overview OAuth 2.0 can be thought of as a digital handshake between the app, service, and user, with everyone agreeing on what is shared. It's an authorization framework that enables applications to access a user\u2019s data on another service (like Facebook or GitHub) without sharing the user\u2019s password . Now that we\u2019ve covered what it is, let\u2019s dive into how it works. \ud83d\udd38 OAuth 2.0 Process Overview The process generally follows 6 steps with 4 components typically involved: Client (app wanting access) Resource Owner (user) Authorization Server Resource Server To understand the process, let\u2019s take a look at how a game would connect to a player\u2019s Facebook account. \ud83d\udcf1 OAuth 2.0 Workflow Example: Game Connecting to Facebook Step 1: Request Access Within the game ( client ), the player ( user ) clicks on a \u201cconnect with Facebook\u201d button to link their profile and find friends. Step 2: Redirect to Service The game redirects the player to Facebook\u2019s ( service\u2019s ) login page. Step 3: Permission Request After logging in, the data that the game is requesting access to will be shown to the player, who can either allow or deny the access. Step 4: Authorization Code If the player gives their approval, Facebook redirects the player back to the game with an authorization code (from the authorization server ). The code is a temporary credential that proves the player\u2019s consent. Step 5: Exchange Code for Token The game now sends the authorization code along with its own identification to Facebook\u2019s server in the background. Facebook identifies the authorization code and the game\u2019s identity and returns an access token . Step 6: Use the Token The game can now use the access token to request the agreed-upon data from Facebook ( resource server ), like the player's friends list. \ud83d\udd11 Key Points In this process, the player\u2019s Facebook credentials were never shared, but the game was able to access the agreed-upon player data from Facebook. This is what OAuth 2.0 facilitates; allowing third-party applications to access data from services in a secure manner without sharing credentials. \ud83c\udfaf OAuth 2.0 Grant Types OAuth 2.0 provides multiple grant types to cater to different use cases. These grant types dictate how the application gets an access token. For most web applications, the Authorization Code Grant is the recommended and most secure method to obtain access tokens. Summary of OAuth 2.0 Grant Types Grant Type Use Case Security Authorization Code Grant Web applications (server-side) Most secure , uses authorization code for token exchange Implicit Grant Single-page applications (client-side) Less secure, access token is exposed in the URL Resource Owner Password Credentials Grant Trusted applications Less secure , user credentials shared directly Client Credentials Grant Machine-to-machine communication Secure, client uses client ID and secret Refresh Token Grant Token renewal Secure, allows long-lived sessions without re-authentication Device Authorization Grant Devices with limited input capabilities Secure for devices like smart TVs, gaming consoles","title":"OAuth 2.0 Overview"},{"location":"OAuth2.0/#oauth-20-overview","text":"OAuth 2.0 can be thought of as a digital handshake between the app, service, and user, with everyone agreeing on what is shared. It's an authorization framework that enables applications to access a user\u2019s data on another service (like Facebook or GitHub) without sharing the user\u2019s password . Now that we\u2019ve covered what it is, let\u2019s dive into how it works.","title":"OAuth 2.0 Overview"},{"location":"OAuth2.0/#oauth-20-process-overview","text":"The process generally follows 6 steps with 4 components typically involved: Client (app wanting access) Resource Owner (user) Authorization Server Resource Server To understand the process, let\u2019s take a look at how a game would connect to a player\u2019s Facebook account.","title":"\ud83d\udd38 OAuth 2.0 Process Overview"},{"location":"OAuth2.0/#oauth-20-workflow-example-game-connecting-to-facebook","text":"","title":"\ud83d\udcf1 OAuth 2.0 Workflow Example: Game Connecting to Facebook"},{"location":"OAuth2.0/#step-1-request-access","text":"Within the game ( client ), the player ( user ) clicks on a \u201cconnect with Facebook\u201d button to link their profile and find friends.","title":"Step 1: Request Access"},{"location":"OAuth2.0/#step-2-redirect-to-service","text":"The game redirects the player to Facebook\u2019s ( service\u2019s ) login page.","title":"Step 2: Redirect to Service"},{"location":"OAuth2.0/#step-3-permission-request","text":"After logging in, the data that the game is requesting access to will be shown to the player, who can either allow or deny the access.","title":"Step 3: Permission Request"},{"location":"OAuth2.0/#step-4-authorization-code","text":"If the player gives their approval, Facebook redirects the player back to the game with an authorization code (from the authorization server ). The code is a temporary credential that proves the player\u2019s consent.","title":"Step 4: Authorization Code"},{"location":"OAuth2.0/#step-5-exchange-code-for-token","text":"The game now sends the authorization code along with its own identification to Facebook\u2019s server in the background. Facebook identifies the authorization code and the game\u2019s identity and returns an access token .","title":"Step 5: Exchange Code for Token"},{"location":"OAuth2.0/#step-6-use-the-token","text":"The game can now use the access token to request the agreed-upon data from Facebook ( resource server ), like the player's friends list.","title":"Step 6: Use the Token"},{"location":"OAuth2.0/#key-points","text":"In this process, the player\u2019s Facebook credentials were never shared, but the game was able to access the agreed-upon player data from Facebook. This is what OAuth 2.0 facilitates; allowing third-party applications to access data from services in a secure manner without sharing credentials.","title":"\ud83d\udd11 Key Points"},{"location":"OAuth2.0/#oauth-20-grant-types","text":"OAuth 2.0 provides multiple grant types to cater to different use cases. These grant types dictate how the application gets an access token. For most web applications, the Authorization Code Grant is the recommended and most secure method to obtain access tokens.","title":"\ud83c\udfaf OAuth 2.0 Grant Types"},{"location":"OAuth2.0/#summary-of-oauth-20-grant-types","text":"Grant Type Use Case Security Authorization Code Grant Web applications (server-side) Most secure , uses authorization code for token exchange Implicit Grant Single-page applications (client-side) Less secure, access token is exposed in the URL Resource Owner Password Credentials Grant Trusted applications Less secure , user credentials shared directly Client Credentials Grant Machine-to-machine communication Secure, client uses client ID and secret Refresh Token Grant Token renewal Secure, allows long-lived sessions without re-authentication Device Authorization Grant Devices with limited input capabilities Secure for devices like smart TVs, gaming consoles","title":"Summary of OAuth 2.0 Grant Types"},{"location":"RestAPI/","text":"","title":"RestAPI"},{"location":"SQL/","text":"SQL Notes for Beginners \ud83d\udcd8 What is SQL? SQL (Structured Query Language) is used to communicate with databases. It's used to store, retrieve, manage, and manipulate data in relational databases like MySQL, PostgreSQL, SQL Server, and Oracle. \ud83e\uddf1 Basic SQL Concepts 1. Database A database is a container that holds tables. 2. Table A table is a collection of rows and columns. \ud83d\udcca Sample Table: Employees EmployeeID FirstName LastName Department Salary 1 John Doe HR 50000 2 Jane Smith IT 60000 3 Mike Johnson IT 55000 4 Lisa Wong Finance 70000 5 Tom Brown HR 52000 \ud83d\udd0d SELECT Queries Get all employees: SELECT * FROM Employees; Result: Returns all rows and columns from the table. Get only First and Last Names: SELECT FirstName, LastName FROM Employees; Filter employees from IT department: SELECT * FROM Employees WHERE Department = 'IT'; Employees with salary > 55000: SELECT * FROM Employees WHERE Salary > 55000; \ud83d\udccb Other Basic Queries Sorting Data: SELECT * FROM Employees ORDER BY Salary DESC; Count of employees: SELECT COUNT(*) FROM Employees; Group by Department: SELECT Department, COUNT(*) AS TotalEmployees FROM Employees GROUP BY Department; Average Salary by Department: SELECT Department, AVG(Salary) AS AvgSalary FROM Employees GROUP BY Department; \u270d\ufe0f Inserting Data INSERT INTO Employees (EmployeeID, FirstName, LastName, Department, Salary) VALUES (6, 'Emma', 'Stone', 'Marketing', 58000); \ud83d\udcdd Updating Data UPDATE Employees SET Salary = 62000 WHERE FirstName = 'Tom'; \u274c Deleting Data DELETE FROM Employees WHERE EmployeeID = 6; \u2705 Tips SQL is case-insensitive . Always backup your data before DELETE or UPDATE . Use WHERE to avoid updating or deleting the whole table. \ud83e\udde0 Practice More Try to create your own table and run these queries: CREATE TABLE Students ( StudentID INT, Name VARCHAR(50), Grade INT ); INSERT INTO Students VALUES (1, 'Alice', 90), (2, 'Bob', 85); Then: SELECT * FROM Students;","title":"SQL Notes for Beginners"},{"location":"SQL/#sql-notes-for-beginners","text":"","title":"SQL Notes for Beginners"},{"location":"SQL/#what-is-sql","text":"SQL (Structured Query Language) is used to communicate with databases. It's used to store, retrieve, manage, and manipulate data in relational databases like MySQL, PostgreSQL, SQL Server, and Oracle.","title":"\ud83d\udcd8 What is SQL?"},{"location":"SQL/#basic-sql-concepts","text":"","title":"\ud83e\uddf1 Basic SQL Concepts"},{"location":"SQL/#1-database","text":"A database is a container that holds tables.","title":"1. Database"},{"location":"SQL/#2-table","text":"A table is a collection of rows and columns.","title":"2. Table"},{"location":"SQL/#sample-table-employees","text":"EmployeeID FirstName LastName Department Salary 1 John Doe HR 50000 2 Jane Smith IT 60000 3 Mike Johnson IT 55000 4 Lisa Wong Finance 70000 5 Tom Brown HR 52000","title":"\ud83d\udcca Sample Table: Employees"},{"location":"SQL/#select-queries","text":"","title":"\ud83d\udd0d SELECT Queries"},{"location":"SQL/#get-all-employees","text":"SELECT * FROM Employees; Result: Returns all rows and columns from the table.","title":"Get all employees:"},{"location":"SQL/#get-only-first-and-last-names","text":"SELECT FirstName, LastName FROM Employees;","title":"Get only First and Last Names:"},{"location":"SQL/#filter-employees-from-it-department","text":"SELECT * FROM Employees WHERE Department = 'IT';","title":"Filter employees from IT department:"},{"location":"SQL/#employees-with-salary-55000","text":"SELECT * FROM Employees WHERE Salary > 55000;","title":"Employees with salary &gt; 55000:"},{"location":"SQL/#other-basic-queries","text":"","title":"\ud83d\udccb Other Basic Queries"},{"location":"SQL/#sorting-data","text":"SELECT * FROM Employees ORDER BY Salary DESC;","title":"Sorting Data:"},{"location":"SQL/#count-of-employees","text":"SELECT COUNT(*) FROM Employees;","title":"Count of employees:"},{"location":"SQL/#group-by-department","text":"SELECT Department, COUNT(*) AS TotalEmployees FROM Employees GROUP BY Department;","title":"Group by Department:"},{"location":"SQL/#average-salary-by-department","text":"SELECT Department, AVG(Salary) AS AvgSalary FROM Employees GROUP BY Department;","title":"Average Salary by Department:"},{"location":"SQL/#inserting-data","text":"INSERT INTO Employees (EmployeeID, FirstName, LastName, Department, Salary) VALUES (6, 'Emma', 'Stone', 'Marketing', 58000);","title":"\u270d\ufe0f Inserting Data"},{"location":"SQL/#updating-data","text":"UPDATE Employees SET Salary = 62000 WHERE FirstName = 'Tom';","title":"\ud83d\udcdd Updating Data"},{"location":"SQL/#deleting-data","text":"DELETE FROM Employees WHERE EmployeeID = 6;","title":"\u274c Deleting Data"},{"location":"SQL/#tips","text":"SQL is case-insensitive . Always backup your data before DELETE or UPDATE . Use WHERE to avoid updating or deleting the whole table.","title":"\u2705 Tips"},{"location":"SQL/#practice-more","text":"Try to create your own table and run these queries: CREATE TABLE Students ( StudentID INT, Name VARCHAR(50), Grade INT ); INSERT INTO Students VALUES (1, 'Alice', 90), (2, 'Bob', 85); Then: SELECT * FROM Students;","title":"\ud83e\udde0 Practice More"}]}